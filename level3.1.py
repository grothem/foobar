'''
A checksum is generated by XORing a bunch of consecutive numbers together.
But on each iteration, the length of number descreases by one.

17 18 19 20/
21 22 23/24
25 26/27 28
29/30 31 32

So in the above example, the soluation would be 17^18^19^20^21^22^23^25^26^29
'''

def solution(start, length):
    checksum = 0

    # We can get the XOR of a range of numbers, say, m to n by:
    # (1^2^3^...^m-2^m-1) ^ (1^2^3^...^n-1^n)
    # we'll treat the first ID in line as m, and the length as n
    m = start
    for x in range(length, 0, -1):
        n = m + x - 1
        checksum ^= XorFromOneTrough(m - 1) ^ XorFromOneTrough(n)

        # The start of the next line will always increase by the length
        m += length

    return checksum

def XorFromOneTrough(n):
    # The XOR of numbers 1 through n can be simplified down to n % 4
    switch = {
        0: n,
        1: 1,
        2: n + 1,
        3: 0
    }
    return switch.get(n % 4)

print(solution(2, 4))